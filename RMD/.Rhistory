summarise(CMAX = max(CONC),
AUC = AUC_partial(TIME, CONC))
df %.% group_by(ID, REP, ARM) %.%
summarise(cmax = max(CONC))
df %.% group_by(ID, REP, ARM) %.%
dplyr::summarise(cmax = max(CONC))
lead(1:10,1)
library(dplyr)
lead(1:10,1)
last(df)
df
first(df)
type_sum(df)
setdiff(df, df[df$ID !=1,])
?group_size
df_g <- group_by(df, ID, REP, ARM)
group_size(df_g)
?n
summarise(df_g, n = n())
dat <- expand.grid(ID = 1:5, TIME = 1:10, REP = 1:5)
head(dat)
dat <- dat[order(dat$REP, dat$ID, dat$TIME),]
head(dat)
head(dat, n = 30)
dat$CONC <- runif(nrow(dat), 1, 10)
head(dat)
?sample
ID_sample <- sample(unique(dat$ID), size = 10)
ID_sample <- sample(unique(dat$ID), size = 10, replace = TRUE)
REP_sample <- sample(unique(dat$REP), size = 10, replace = TRUE)
key <- cbind(ID_sample, REP_sample)
head(key)
key <- data.frame(ID = ID_sample, REP = REP_sample))
key <- data.frame(ID = ID_sample, REP = REP_sample)
head(key)
libs <- c("dplyr", "data.table")
lapply(libs, require, character.only = T)
dat <- expand.grid(ID = 1:5, TIME = 1:10, REP = 1:5)
dat <- dat[order(dat$REP, dat$ID, dat$TIME),]
dat$CONC <- runif(nrow(dat), 1, 10)
set.seed(12345)
ID_sample <- sample(unique(dat$ID), size = 10, replace = TRUE)
REP_sample <- sample(unique(dat$REP), size = 10, replace = TRUE)
key <- data.frame(ID = ID_sample, REP = REP_sample)
dt <- data.table(dat)
setkey(dt, ID, REP)
dt_subset <- dt[J(key)]
dt_subset
head(dat)
tail(dat)
key
dt_subset
head(dt_subset)
# dataset
dat <- expand.grid(ID = 1:3, TIME = 1:3, REP = 1:5)
dat <- dat[order(dat$REP, dat$ID, dat$TIME),]
dat$CONC <- runif(nrow(dat), 1, 10)
set.seed(12345)
ID_sample <- sample(unique(dat$ID), size = 5, replace = TRUE)
REP_sample <- sample(unique(dat$REP), size = 5, replace = TRUE)
key <- data.frame(ID = ID_sample, REP = REP_sample)
# data table way?
dt <- data.table(dat)
setkey(dt, ID, REP)
dt_subset <- dt[J(key)]
head(dat)
tbl(dat)
head(hflights)
library(dplyr)
head(hflights)
?hflights
head(dat)
key
dt[J(key)]
tail(dat)
filter(dat, key)
filter(dat, ID %in% key["ID"], REP %in% key["REP"])
filter(dat, ID %in% key["ID"])
key["ID"]
filter(dat, ID %in% key[["ID"]])
filter(dat, ID %in% key[["ID"]], REP %in% key[["REP"]])
dat <- expand.grid(ID = 1:3, REP = 1:5, TIME = 1:3)
dat <- dat[order(dat$REP, dat$ID, dat$TIME),]
dat$CONC <- runif(nrow(dat), 1, 10)
set.seed(12345)
ID_sample <- sample(unique(dat$ID), size = 5, replace = TRUE)
REP_sample <- sample(unique(dat$REP), size = 5, replace = TRUE)
key <- data.frame(ID = ID_sample, REP = REP_sample)
# data table way?
dt <- data.table(dat)
setkey(dt, ID, REP)
dt_subset <- dt[J(key)]
head(dat)
row.names(dat) <- NULL
head(dat)
tail(dat)
set.seed(1235)
ID_sample <- sample(unique(dat$ID), size = 5, replace = TRUE)
REP_sample <- sample(unique(dat$REP), size = 5, replace = TRUE)
key <- data.frame(ID = ID_sample, REP = REP_sample)
# data table way?
dt <- data.table(dat)
setkey(dt, ID, REP)
dt_subset <- dt[J(key)]
dt[J(key)]
key
dt[J(key)]
filter(dat, ID %in% key[["ID"]], REP %in% key[["REP"]])
filter(dat, (ID %in% key[["ID"]]& REP %in% key[["REP"]]))
filter(dat, (ID & REP %in% key)
)
filter(dat, (ID && REP %in% key)
)
dat %.% group_by(ID, REP) %.% filter(key)
dat %.% group_by(ID, REP) %.% filter(. %in%key)
dat %.% group_by(ID, REP) %.% filter( %in%key)
transform(dat, ID.REP = paste0(ID, '.', REP))
dat <- transform(dat, KEY = paste0(ID, '_', REP))
paste0(ID_sample, REP_sample)
KEY <- paste0(ID_sample, '_' REP_sample)
KEY <- paste0(ID_sample, '_', REP_sample)
KEY
filter(dat, ID_REP %in% KEY)
dat <- transform(dat, ID_REP = paste0(ID, '_', REP))
KEY <- paste0(ID_sample, '_', REP_sample)
filter(dat, ID_REP %in% KEY)
ID_REP %in% KEY
dat$ID_REP %in% KEY
filter(dat, ID_REP %in% KEY)
KEY
filter(dat, ID_REP == KEY)
dat$ID_REP == KEY
dat$ID_REP %in% KEY
str(dat)
str(KEY)
filter(dat, ID_REP %in% KEY)
filter(dat, as.character(ID_REP) %in% KEY)
dat$ID_REP %in% KEY
dat[dat$ID_REP %in% KEY,]
filter(dat, as.character(ID) %in% ID_sample)
?filter
dplyr::filter(dat, as.character(ID) %in% ID_sample)
dplyr::filter(dat, ID %in% ID_sample)
dplyr::filter(dat, ID ==1)
dplyr::filter(dat, ID %in% c(1))
dplyr::filter(dat, ID %in% c(1,2))
dplyr::filter(dat, ID %in% ID_sample)
REP_sample
dplyr::filter(dat, REP %in% REP_sample)
dplyr::filter(dat, ID_REP %in% KEY)
str(dat$ID_REP)
as.character(dat$ID_REP)
which(as.character(dat$ID_REP) %in% KEY)
which(dat$ID_REP %in% KEY)
p_unload(all)
sessionInfo()
dplyr::filter(dat, ID_REP == "1_2")
dplyr::filter(dat, ID_REP == c("1_2"))
dplyr::filter(dat, ID_REP == c("1_2", "1_3"))
dplyr::filter(dat, ID_REP %in% c("1_2", "1_3"))
dplyr::filter(dat, ID_REP %in% KEY)
KEY
eval(KEY)
dplyr::filter(dat, ID_REP %in% eval(KEY))
str(key)
str(KEY)
str(c("1_3", "2_3"))
dplyr::filter(dat, ID_REP %in% c("1_3", "2_3", "1_4"))
test_key <- c("1_3", "2_3", "1_4")
dplyr::filter(dat, ID_REP %in% test_key)
KEY
dplyr::filter(dat, ID_REP %in% c("1_3", "2_3", "1_4", "3_3", "3_2"))
test_key <- c("1_3", "2_3", "1_4", "3_3", "3_2")
dplyr::filter(dat, ID_REP %in% test_key)
equivalent(KEY, test_key)
?equivalent
install.packages(assertthat)
devtools::install_github("hadley/assertthat")
library(assertthat)
are_equal(KEY, test_key)
dplyr::filter(dat, ID_REP %in% KEY[])
dplyr::filter(dat, ID_REP %in% KEY)
deparse(KEY)
parse(KEY)
dplyr::filter(dat, ID_REP %in% KEY)
KEY2 <- KEY
dplyr::filter(dat, ID_REP %in% KEY2)
rm(list = ls())
dat <- expand.grid(ID = 1:3, REP = 1:5, TIME = 1:3)
dat <- dat[order(dat$REP, dat$ID, dat$TIME),]
dat$CONC <- runif(nrow(dat), 1, 10)
set.seed(1235)
ID_sample <- sample(unique(dat$ID), size = 5, replace = TRUE)
REP_sample <- sample(unique(dat$REP), size = 5, replace = TRUE)
key <- data.frame(ID = ID_sample, REP = REP_sample)
KEY <- paste0(ID_sample, '_', REP_sample)
dplyr::filter(dat, ID_REP %in% c("1_3", "2_3", "1_4", "3_3", "3_2"))
dat
dat <- transform(dat, ID_REP = paste0(ID, '_', REP))
KEY <- paste0(ID_sample, '_', REP_sample)
dplyr::filter(dat, ID_REP %in% c("1_3", "2_3", "1_4", "3_3", "3_2"))
test_key <- c("1_3", "2_3", "1_4", "3_3", "3_2")
dplyr::filter(dat, ID_REP %in% test_key)
dplyr::filter(dat, ID_REP %in% KEY2)
dplyr::filter(dat, ID_REP %in% KEY)
?setkey
?group_by
?filter
select(mtcars, mpg, cly, hp:vs)
select(mtcars, mpg, cyl, hp:vs)
head(mtcars)
dat <- expand.grid(ID = 1:3, REP = 1:5, TIME = 1:10)
dat <- dat[order(dat$REP, dat$ID, dat$TIME),]
dat$CONC <- runif(nrow(dat), 1, 10)
time_subsets <- list(c(0, 2), c(0, 5), c(2, 8), c(1, 10))
lapply(time_subsets, print)
ts1 <- time_subsets[[1]]
ts1
dat %.% filter(TIME >= ts1[1], TIME <= ts1[2])
subset_time <- function(ts, dat) dat %.% filter(TIME >= ts[1], TIME <= ts[2])
subset_time(ts1, dat)
dat <- expand.grid(ID = 1:3, REP = 1:2, TIME = 1:10)
dat <- dat[order(dat$REP, dat$ID, dat$TIME),]
dat$CONC <- runif(nrow(dat), 1, 10)
lapply(time_subsets, subset_time )
lapply(time_subsets, subset_time, dat )
list_subsets <- lapply(time_subsets, subset_time, dat )
df <- list_subsets[[1]]
mean_calc <- function(df, groups) {
df %.% group_by(substitute(groups)) %.%
summarise(mean(CONC))
}
mean_calc(df, ID)
mean_calc <- function(df, groups) {
df %.% group_by(groups) %.%
summarise(mean(CONC))
}
mean_calc(df, ID)
mean_calc(df, "ID")
df %.% group_by("ID")
df %.% group_by("ID") %.% summarise(mean(CONC))
df
df <- list_subsets[[1]]
df
mean_calc(df, "ID")
mean_calc(df, "ID")
df
mean_calc <- function(df, groups) {
df %.% group_by(groups) %.%
summarise(mean(CONC))
}
mean_calc(df, "ID")
mean_calc(df, "ID")
groupos
groups
eval(groups)
test
data <- list_subsets[[1]]
rm(list = ls())
dat <- expand.grid(ID = 1:3, REP = 1:2, TIME = 1:10)
dat <- dat[order(dat$REP, dat$ID, dat$TIME),]
dat$CONC <- runif(nrow(dat), 1, 10)
time_subsets <- list(c(0, 2), c(0, 5), c(2, 8), c(1, 10))
ts1 <- time_subsets[[1]]
subset_time <- function(ts, dat) dat %.% filter(TIME >= ts[1], TIME <= ts[2])
subset_time(ts1, dat)
list_subsets <- lapply(time_subsets, subset_time, dat )
data <- list_subsets[[1]]
mean_calc <- function(df, grouping) {
df %.% group_by(grouping) %.%
summarise(mean(CONC))
}
mean_calc(data, "ID")
mean_calc(data, "ID")
df
substitute(df)
mean_calc(data, "ID")
dat
data
mean_calc <- function(df, grouping) {
substitute(df) %.% group_by(grouping) %.%
summarise(mean(CONC))
}
mean_calc <- function(df, grouping) {
substitute(df) %.% group_by(grouping) %.%
summarise(mean(CONC))
}
mean_calc(data, "ID")
mean_calc(data, "ID")
df
data
mean_calc <- function(df, grouping) {
x <- substitute(df)
y <- df
}
mean_calc(data, "ID")
mean_calc <- function(df, grouping) {
debug()
x <- substitute(df)
y <- df
}
mean_calc(data, "ID")
?debug
mean_calc <- function(df, grouping) {
browser()
x <- substitute(df)
y <- df
}
mean_calc(data, "ID")
df
mean_calc(data, "ID")
x
x
data
eval(x)
x
x %.% filter(ID ==1)
eval(x) %.% filter(ID ==1)
mean_calc <- function(df, grouping) {
eval(substitute(df)) %.% group_by(grouping) %.%
summarise(mean(CONC))
}
mean_calc(data, "ID")
mean_calc <- function(df, grouping) {
eval(substitute(df)) %.% group_by(grouping) %.%
summarise(mean(CONC))
}
mean_calc(data, "ID")
mean_calc(data, "ID")
mean_calc <- function(df, grouping) {
browser()
eval(substitute(df)) %.% group_by(grouping) %.%
summarise(mean(CONC))
}
#df %.% group_by("ID")
mean_calc(data, "ID")
eval(substitute(df))
grouping
grouping %.% group_by(grouping)
grouping %.% group_by(eval(grouping))
grouping %.% group_by(substitute(grouping))
eval(substitute(df)) %.%group_by(substitute(grouping))
eval(substitute(df)) %.%group_by(grouping)
eval(substitute(df)) %.%group_by(eval(grouping))
eval(grouping)
deparse(eval(grouping))
deparse(substitute(grouping))
substitute(grouping)
eval(substitute(df)) %.%group_by(eval(substitute(grouping)))
eval(substitute(df)) %.%group_by(ID)
eval(substitute(df)) %.%group_by(as.symbol(grouping))
eval(substitute(df)) %.%group_by("ID")
mean_calc(data, ID)
mean_calc <- function(df) {
browser()
eval(substitute(df)) %.% group_by(ID) %.%
summarise(mean(CONC))
}
#df %.% group_by("ID")
mean_calc(data)
groups <- "ID"
data %.% group_by(groups)
?group_by
grouping <- "ID"
data %.% group_by(eval(grouping))
data %.% group_by(eval(grouping)) %.% summarise(mean(CONC))
eval(grouping)
substitute(grouping)
match.call(grouping)
?match.call
x = eval(grouping)
x
data %.% group_by(x = eval(grouping)) %.% summarise(mean(CONC))
data %.% group_by(x = "ID") %.% summarise(mean(CONC))
data %.% group_by(x = "ID") %.% summarise(mean(CONC))
data %.% group_by(x = "ID") %.% summarise(mean(CONC))
data %.% group_by(x = ID) %.% summarise(mean(CONC))
data
data %.% group_by(ID) %.% summarise(mean(CONC))
data %.% group_by(x=ID) %.% summarise(mean(CONC))
?group_by
mean_calc <- function(df,...) {
eval(substitute(df)) %.% group_by(...) %.%
summarise(mean(CONC))
}
mean_calc(data)
mean_calc(data, ID)
mean_calc(data, ID, REP)
lapply(list_subsets, mean_calc, ID)
head(list_subsets)
lapply(list_subsets, mean_calc,df = x, ID)
lapply(list_subsets, mean_calc)
lapply(list_subsets, mean_calc, ID)
lapply(list_subsets, mean_calc, ID)
x
df
data
rm(x)
lapply(list_subsets, mean_calc, ID)
lapply(list_subsets, function(x) mean_calc(x,ID))
lapply(list_subsets, function(x) mean_calc(df =x,ID))
?lapply
lapply(list_subsets, function(x) mean_calc(x))
lapply(list_subsets, function(x) mean_calc())
lapply(list_subsets, function(x) mean_calc(df =x))
lapply(list_subsets, mean)
lapply(list_subsets, mean(ID))
lapply(list_subsets, mean, ID)
lapply(list_subsets, fuction(x) mean(CONC))
lapply(list_subsets, fuction(x) {mean(CONC)})
lapply(list_subsets, function(x) {mean(CONC)})
lapply(list_subsets, function(x) print(x))
lapply(list_subsets, function(x) x$CONC)
lapply(list_subsets, function(x) mean(x$CONC))
mean_conc(x)})
lapply(list_subsets, function(x) {mean_conc <- function(df){ mean(df$CONC)}
mean_conc(x)})
lapply(list_subsets, function(x) {mean_calc <- function(df,...) {
eval(substitute(df)) %.% group_by(...) %.%
summarise(mean(CONC))}
mean_calc(x, ID)
)
lapply(list_subsets, function(x) {mean_calc <- function(df,...) {
eval(substitute(df)) %.% group_by(...) %.%
summarise(mean(CONC))}
mean_calc(x, ID)}
)
lapply(list_subsets, mean_calc, ID}
lapply(list_subsets, mean_calc, ID)
mean_calc2 <- function(df) {
eval(substitute(df)) %.% group_by(ID) %.%
summarise(mean(CONC))
}
lapply(list_subsets, mean_calc2)
mean_calc2 <- function(df) {
browser()
eval(substitute(df)) %.% group_by(ID) %.%
summarise(mean(CONC))
}
lapply(list_subsets, mean_calc2)
df
eval(substitute(df))
lapply(list_subsets, function(x) mean_calc(x, ID))
lapply(list_subsets, function(x) mean_calc(df =x, ID))
lapply(list_subsets, function(x) mean_calc(df =x, ID))
lapply(list_subsets, function(x) mean_calc2(x))
df
eval(substitute(df))
mc(x)}
mean_calc2 <- function(df) {
eval(substitute(df)) %.% group_by(ID) %.%
summarise(mean(CONC))
}
mc(x)}
mc(x)})
lapply(list_subsets, function(x) {mc <- mean_calc2
mc(x)})
mean_calc2 <- function(df) {
test_data <- df
browser()
eval(substitute(df)) %.% group_by(ID) %.%
summarise(mean(CONC))
}
lapply(list_subsets, function(x) {mc <- mean_calc2
mc(x)})
test_data
eval(substitute(df))
mean_calc3 <- function(df,...) {
df %.% group_by(...) %.%
summarise(mean(CONC))
}
mean_calc3 <- function(df,...) {
df %.% group_by(...) %.%
summarise(mean(CONC))
}
mean_calc3(data, ID)
lapply(list_subsets, mean_calc3)
lapply(list_subsets, mean_calc3, ID)
rm(list = ls())
libs <- c("dplyr", "data.table")
lapply(libs, require, character.only = T)
# minimally reproducible example
# dataset
dat <- expand.grid(ID = 1:3, REP = 1:5, TIME = 1:3)
dat <- dat[order(dat$REP, dat$ID, dat$TIME),]
dat$CONC <- runif(nrow(dat), 1, 10)
set.seed(1235)
ID_sample <- sample(unique(dat$ID), size = 5, replace = TRUE)
REP_sample <- sample(unique(dat$REP), size = 5, replace = TRUE)
key <- data.frame(ID = ID_sample, REP = REP_sample)
semi_join(dat, key)
key
for(i in seq_along(Rmd_files)) {
system(command=paste("pandoc -s -S --toc -c custom.css", paste0(str_split(Rmd_files[[i]], pattern = '.Rmd')[[1]][[1]], ".md"),
"-o", paste0("..\\", str_split(Rmd_files[[i]], pattern = '.md')[[1]][[1]], "html")))
}
setwd(paste0(getwd(), "/RMD"))
setwd(paste0(getwd(), "/TestWebsite/RMD"))
##list files
files <- list.files()
isRmd <- grep("*.Rmd", files)
Rmd_files <- files[isRmd]
i <- 1
system(command=paste("pandoc -s -S --toc -c custom.css", paste0(str_split(Rmd_files[[i]], pattern = '.Rmd')[[1]][[1]], ".md"),
"-o", paste0("..\\", str_split(Rmd_files[[i]], pattern = '.md')[[1]][[1]], "html")))
paste("pandoc -s -S --toc -c custom.css", paste0(str_split(Rmd_files[[i]], pattern = '.Rmd')[[1]][[1]], ".md"),
"-o", paste0("..\\", str_split(Rmd_files[[i]], pattern = '.md')[[1]][[1]], "html"))
paste0("..\\", str_split(Rmd_files[[i]], pattern = '.md')[[1]][[1]], "html")
paste0(str_split(Rmd_files[[i]], pattern = '.Rmd')
)
?str_split
str_split(Rmd_files[[1]], pattern='.Rmd')[[1]][[1]]
